{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tokmo\\\\smartsearch\\\\frontend\\\\src\\\\components\\\\SearchResults.js\";\nimport React from 'react';\nimport './SearchResults.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchResults = ({\n  results\n}) => {\n  if (!results) return null;\n  const {\n    query,\n    results: searchResults,\n    analysis\n  } = results;\n\n  // Извлекаем краткий ответ из анализа (первый абзац после заголовка)\n  const getQuickAnswer = () => {\n    if (!analysis) return null;\n\n    // Если анализ начинается с заголовка в формате Markdown (#)\n    if (analysis.startsWith('#')) {\n      const lines = analysis.split('\\n');\n      // Пропускаем заголовок и ищем первый непустой абзац\n      for (let i = 1; i < lines.length; i++) {\n        if (lines[i].trim() && !lines[i].startsWith('#') && !lines[i].startsWith('-') && !lines[i].startsWith('*')) {\n          return lines[i].trim();\n        }\n      }\n    }\n\n    // Если нет явного форматирования, берем первый абзац\n    const firstParagraph = analysis.split('\\n\\n')[0];\n    if (firstParagraph && !firstParagraph.startsWith('#')) {\n      return firstParagraph.trim();\n    }\n    return null;\n  };\n  const quickAnswer = getQuickAnswer();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-results\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-summary\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Search Results for: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"highlight\",\n          children: query\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results-count\",\n        children: [searchResults.length, \" results found\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), quickAnswer && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quick-answer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Quick Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: quickAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"analysis-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"AI Analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"analysis-content\",\n        children: analysis.split('\\n').map((line, index) => {\n          // Обработка заголовков Markdown\n          if (line.startsWith('# ')) {\n            return /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: line.substring(2)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 22\n            }, this);\n          } else if (line.startsWith('## ')) {\n            return /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: line.substring(3)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 22\n            }, this);\n          } else if (line.startsWith('### ')) {\n            return /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: line.substring(4)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 22\n            }, this);\n          }\n          // Обработка жирного текста и списков\n          else if (line.includes('**')) {\n            return /*#__PURE__*/_jsxDEV(\"p\", {\n              dangerouslySetInnerHTML: {\n                __html: line.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>').replace(/\\- /g, '• ')\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this);\n          }\n          // Обычный текст\n          else if (line.trim()) {\n            return /*#__PURE__*/_jsxDEV(\"p\", {\n              children: line\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 22\n            }, this);\n          }\n          // Пустые строки для разделения абзацев\n          return /*#__PURE__*/_jsxDEV(\"br\", {}, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results-list\",\n      children: searchResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"result-title\",\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: result.link,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: result.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-link\",\n          children: result.link\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-snippet\",\n          children: result.snippet\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), searchResults.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-results\",\n      children: \"No results found. Try refining your search query or uploading a different image.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_c = SearchResults;\nexport default SearchResults;\nvar _c;\n$RefreshReg$(_c, \"SearchResults\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","SearchResults","results","query","searchResults","analysis","getQuickAnswer","startsWith","lines","split","i","length","trim","firstParagraph","quickAnswer","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","line","index","substring","includes","dangerouslySetInnerHTML","__html","replace","result","href","link","target","rel","title","snippet","_c","$RefreshReg$"],"sources":["C:/Users/tokmo/smartsearch/frontend/src/components/SearchResults.js"],"sourcesContent":["import React from 'react';\r\nimport './SearchResults.css';\r\n\r\nconst SearchResults = ({ results }) => {\r\n  if (!results) return null;\r\n\r\n  const { query, results: searchResults, analysis } = results;\r\n  \r\n  // Извлекаем краткий ответ из анализа (первый абзац после заголовка)\r\n  const getQuickAnswer = () => {\r\n    if (!analysis) return null;\r\n    \r\n    // Если анализ начинается с заголовка в формате Markdown (#)\r\n    if (analysis.startsWith('#')) {\r\n      const lines = analysis.split('\\n');\r\n      // Пропускаем заголовок и ищем первый непустой абзац\r\n      for (let i = 1; i < lines.length; i++) {\r\n        if (lines[i].trim() && !lines[i].startsWith('#') && !lines[i].startsWith('-') && !lines[i].startsWith('*')) {\r\n          return lines[i].trim();\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Если нет явного форматирования, берем первый абзац\r\n    const firstParagraph = analysis.split('\\n\\n')[0];\r\n    if (firstParagraph && !firstParagraph.startsWith('#')) {\r\n      return firstParagraph.trim();\r\n    }\r\n    \r\n    return null;\r\n  };\r\n  \r\n  const quickAnswer = getQuickAnswer();\r\n\r\n  return (\r\n    <div className=\"search-results\">\r\n      <div className=\"search-summary\">\r\n        <h2>Search Results for: <span className=\"highlight\">{query}</span></h2>\r\n        <div className=\"results-count\">{searchResults.length} results found</div>\r\n      </div>\r\n\r\n      {quickAnswer && (\r\n        <div className=\"quick-answer\">\r\n          <h3>Quick Answer</h3>\r\n          <p>{quickAnswer}</p>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"analysis-container\">\r\n        <h3>AI Analysis</h3>\r\n        <div className=\"analysis-content\">\r\n          {analysis.split('\\n').map((line, index) => {\r\n            // Обработка заголовков Markdown\r\n            if (line.startsWith('# ')) {\r\n              return <h2 key={index}>{line.substring(2)}</h2>;\r\n            } else if (line.startsWith('## ')) {\r\n              return <h3 key={index}>{line.substring(3)}</h3>;\r\n            } else if (line.startsWith('### ')) {\r\n              return <h4 key={index}>{line.substring(4)}</h4>;\r\n            }\r\n            // Обработка жирного текста и списков\r\n            else if (line.includes('**')) {\r\n              return (\r\n                <p key={index} dangerouslySetInnerHTML={{ \r\n                  __html: line\r\n                    .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\r\n                    .replace(/\\- /g, '• ')\r\n                }} />\r\n              );\r\n            }\r\n            // Обычный текст\r\n            else if (line.trim()) {\r\n              return <p key={index}>{line}</p>;\r\n            }\r\n            // Пустые строки для разделения абзацев\r\n            return <br key={index} />;\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"results-list\">\r\n        {searchResults.map((result, index) => (\r\n          <div key={index} className=\"result-item\">\r\n            <h3 className=\"result-title\">\r\n              <a href={result.link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                {result.title}\r\n              </a>\r\n            </h3>\r\n            <div className=\"result-link\">{result.link}</div>\r\n            <div className=\"result-snippet\">{result.snippet}</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {searchResults.length === 0 && (\r\n        <div className=\"no-results\">\r\n          No results found. Try refining your search query or uploading a different image.\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchResults; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}